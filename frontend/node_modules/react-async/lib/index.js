"use strict";

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getInitialState = function getInitialState() {
  return {
    data: undefined,
    error: undefined,
    isLoading: false,
    startedAt: undefined,
    finishedAt: undefined,
    promise: undefined
  };
};

var _React$createContext = _react2.default.createContext(getInitialState()),
    Consumer = _React$createContext.Consumer,
    Provider = _React$createContext.Provider;

/**
 * Renders only when promise is rejected.
 *
 * @prop {boolean} persist Show old error while loading
 * @prop {Function|Node} children Function (passing error and finishedAt) or React node
 */


var Async = function (_React$Component) {
  _inherits(Async, _React$Component);

  function Async() {
    var _temp, _this, _ret;

    _classCallCheck(this, Async);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
  }

  Async.prototype.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.load();
  };

  Async.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.watch !== this.props.watch) this.load();
  };

  Async.prototype.componentWillUnmount = function componentWillUnmount() {
    this.cancel();
    this.mounted = false;
  };

  Async.prototype.render = function render() {
    var _this2 = this;

    var renderProps = _extends({}, this.state, {
      cancel: this.cancel,
      run: this.run,
      reload: function reload() {
        _this2.load();
        _this2.run.apply(_this2, _this2.args);
      },
      setData: this.setData,
      setError: this.setError
    });

    if (typeof this.props.children === "function") {
      return this.props.children(renderProps);
    }

    if (this.props.children) {
      return _react2.default.createElement(
        Provider,
        { value: renderProps },
        this.props.children
      );
    }

    return null;
  };

  return Async;
}(_react2.default.Component);

/**
 * Renders only while loading.
 *
 * @prop {boolean} initial Show only on initial load (data is undefined)
 * @prop {Function|Node} children Function (passing props) or React node
 */


var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.mounted = false;
  this.counter = 0;
  this.args = [];
  this.state = getInitialState();

  this.load = function () {
    if (!_this3.props.promiseFn) return;
    _this3.counter++;
    var promise = _this3.props.promiseFn();
    _this3.setState({ isLoading: true, startedAt: new Date(), finishedAt: undefined, promise: promise });
    return promise.then(_this3.onResolve(_this3.counter), _this3.onReject(_this3.counter));
  };

  this.run = function () {
    var _props;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (!_this3.props.deferFn) return;
    _this3.counter++;
    _this3.args = args;
    var promise = (_props = _this3.props).deferFn.apply(_props, args);
    _this3.setState({ isLoading: true, startedAt: new Date(), finishedAt: undefined, promise: promise });
    return promise.then(_this3.onResolve(_this3.counter), _this3.onReject(_this3.counter));
  };

  this.cancel = function () {
    _this3.counter++;
    _this3.setState({ isLoading: false, startedAt: undefined });
  };

  this.onResolve = function (counter) {
    return function (data) {
      if (_this3.mounted && _this3.counter === counter) {
        _this3.setData(data, function () {
          return _this3.props.onResolve && _this3.props.onResolve(data);
        });
      }
      return data;
    };
  };

  this.onReject = function (counter) {
    return function (error) {
      if (_this3.mounted && _this3.counter === counter) {
        _this3.setError(error, function () {
          return _this3.props.onReject && _this3.props.onReject(error);
        });
      }
      return error;
    };
  };

  this.setData = function (data, callback) {
    _this3.setState({ data: data, error: undefined, isLoading: false, finishedAt: new Date() }, callback);
    return data;
  };

  this.setError = function (error, callback) {
    _this3.setState({ error: error, isLoading: false, finishedAt: new Date() }, callback);
    return error;
  };
};

Async.Loading = function (_ref) {
  var children = _ref.children,
      initial = _ref.initial;
  return _react2.default.createElement(
    Consumer,
    null,
    function (props) {
      if (!props.isLoading) return null;
      if (initial && props.data !== undefined) return null;
      return typeof children === "function" ? children(props) : children || null;
    }
  );
};

/**
 * Renders only when promise is resolved.
 *
 * @prop {boolean} persist Show old data while loading
 * @prop {Function|Node} children Function (passing data and props) or React node
 */
Async.Resolved = function (_ref2) {
  var children = _ref2.children,
      persist = _ref2.persist;
  return _react2.default.createElement(
    Consumer,
    null,
    function (props) {
      if (props.data === undefined) return null;
      if (props.isLoading && !persist) return null;
      return typeof children === "function" ? children(props.data, props) : children || null;
    }
  );
};

/**
 * Renders only when promise is rejected.
 *
 * @prop {boolean} persist Show old error while loading
 * @prop {Function|Node} children Function (passing error and props) or React node
 */
Async.Rejected = function (_ref3) {
  var children = _ref3.children,
      persist = _ref3.persist;
  return _react2.default.createElement(
    Consumer,
    null,
    function (props) {
      if (props.error === undefined) return null;
      if (props.isLoading && !persist) return null;
      return typeof children === "function" ? children(props.error, props) : children || null;
    }
  );
};

exports.default = Async;